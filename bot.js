const TelegramBot = require('node-telegram-bot-api');
const token_tg = "1953524348:AAGnDAeg5c1dLkAqWiQmy-cTPRwpyWAJlN4";
const ADMIN_CHAT = -1001589426879;
const passgen = require('passgen');
const bot = new TelegramBot(token_tg, {polling: true});
const MANAGER_CHAT = -1001339183887;
const cities = require("./api/cities-api")
require('./test-connection-db');

//–¢—É—Ç —É –Ω–∞—Å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–º—ã –≤–º–µ—Å—Ç–æ API
//apiTest -- —Ç—É—Ç JSON-—Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –º–∞—Å–∏–≤ –æ–±—ä–µ—Ç–æ–≤, —ç—Ç–æ –ø–æ-—Å—É—Ç–∏ –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å API
let apiTest = require('./api-request.json')
const api = require('./api/client-api')

const {
    getMainDataFromMsg,
} = require("./utils/TelegramUtils")


bot.onText(/\/start/, (msg) => {
    console.log(msg)
    try {
        let msgInfo = getMainDataFromMsg(msg);
        let key = msg.text.replace("/start", '').trim();
        let password = passgen.create(20);
        console.log(msgInfo)
        getUserByTelegramID(msg).then(user => {
            if (user) {
                processReturnedUser(msgInfo);
            } else {
                registerUser(msgInfo);
                bot.sendMessage(msgInfo.chat, `–ü—Ä–∏–≤—ñ—Ç, ${msgInfo.name} ${msgInfo.last_name}!\n–¶–µ ü§ñ –∫–æ–º–ø–∞–Ω—ñ—ó –†–£–ú–°!\n–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à:
                        \n‚ñ´Ô∏è–æ–±—Ä–∞—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–æ–±—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø—ñ–¥–±—ñ—Ä–æ–∫
                        \n‚ñ´Ô∏è—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤'—è–∑–æ–∫ —ñ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º
                        \n‚ñ´Ô∏è–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—è–≤—É –Ω–æ–≤–∏—Ö –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ —Ç–≤–æ—ó–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ ;)
                        \n‚ñ´Ô∏è–ø–æ–∂–∞–ª—ñ—Ç–∏—Å—è –Ω–∞–º —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É, –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞ –∂–∏—Ç–ª–∞, –∞–±–æ –∫–≤–∞—Ä—Ç–∏—Ä—É.
                        \n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –≤–∞—Å –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞.
                        `).then(res => {
                        return bot.sendMessage(msgInfo.chat, `–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ—á–∏—Ç–∞—Ç–∏ —â–æ —Ç–∞–∫–µ –†–£–ú–°, —Ç–∞ —á–∏–º –º–∏ –∑–∞–π–º–∞—î–º–æ—Å—è —É [–æ–≥–ª—è–¥–æ–≤—ñ–π —Å—Ç–∞—Ç—Ç—ñ](https://teletype.in/@rooms_ua/NGUnJgEUi)`, {parse_mode: "Markdown"})
                    }
                )
                 sendGreetingMessage(msgInfo);
                 bot.sendMessage(ADMIN_CHAT, `–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á "${msgInfo.name + " " + msgInfo.last_name}" –∑ ID"${msgInfo.chat}"`);
            }
            // if (key.includes("chat")) {
            //     let msgInfo = getMainDataFromMsg(msg);
            //     getUserByTelegramID(msg).then(user => {
            //         if (user.role.type === "manager") {
            //             api.request({
            //                 "url": "users",
            //                 "method": "PUT",
            //                 "id": user.id,
            //                 body: {support_receiver_telegram_id: key.split("_")[1]}
            //             }).then(() => {
            //                 return getUserByTelegramID(key.split("_")[1])
            //             }).then(client => {
            //                 return bot.sendMessage(msgInfo.chat, `–í–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ —á–∞—Ç—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º *${client.name ? client.name : "" + " " + client.last_name ? client.last_name : ""}* ${client.phone ? "–∑ –Ω–æ–º–µ—Ä–æ–º +" + client.phone : ""}\n`, generateMessagingButtons())
            //             })
            //
            //         }
            //     })
            //     return;
            // }
            // if (key.includes("5f44102d479cca001db181d7")) {
            //     api.request({
            //         "url": "users",
            //         "method": "PUT",
            //         "id": user.id,
            //         body: {subscription: "5f44102d479cca001db181d7", days_of_subscription: 99999}
            //     })
            // }
        })
    } catch (e) {
        console.log(e);
    }

})

bot.onText(/–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è/, (msg) => {
    let chat = msg.hasOwnProperty('chat') ? msg.chat.id : msg.from.id;

    const opts = {
        reply_to_message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            keyboard: [
                    [{text: '–û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ ‚öôÔ∏è'}, {
                    text: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É ‚ÑπÔ∏è'
                }, {
                    text: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚óÄÔ∏è'
                }],
                [{text: '–•–æ—á—É –ø–æ–∂–∞–ª—ñ—Ç–∏—Å—è üò°', callback_data: 'settings'}]
            ]
        })
    };
    bot.sendMessage(chat, '–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é', opts);
})

bot.onText(/–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é/, (msg) => {
    sendMainMenu(msg)
});

//TODO Fresh apartments
bot.onText(/–°–≤—ñ–∂—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏/, (msg) => {
    let msgInfo = getMainDataFromMsg(msg);
    console.log(apiTest)


    // getUserByTelegramID(msg).then(async user => {
    //     if (user.subscription.name.includes("–¢–µ—Å—Ç")) {
    //         setTimeout( () => {
    //                 bot.sendMessage(user.telegram_id, "–î—è–∫—É—é, —â–æ —Ç–∏ –∑ –Ω–∞–º–∏! –†–£–ú–° –ë–û–¢ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –±–µ–∑ –∫–æ–º—ñ—Å—ñ—ó!" + "\n" +
    //                     "–ú–∏ –≤–∑–∞–≥–∞–ª—ñ –ø—Ä–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –ë–û–¢ —â–æ–± —Ç–∏ –º—ñ–≥ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ –∫–≤–∞—Ä—Ç–∏—Ä. " +
    //                     "–ê–ª–µ –∑–∞—Ä–∞–∑ –º–∏ –¥–∞—î–º–æ —Ç–æ–±—ñ \n" +
    //                     "1 –¢–ï–°–¢–û–í–ò–ô –î–ï–ù–¨ —â–æ–± –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –Ω–∞—à–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º!\n–ü—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É - —Ç–∏ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ª–∏—à–µ –ø–æ 10 –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –¥–µ–Ω—å" +
    //                     "\n" +
    //                     "–•–æ—á–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–ª–∞—Ç–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –∑ –±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –æ–±'—î–∫—Ç—ñ–≤? –ü—Ä–∏–¥–±–∞–π —Ç—É—Ç https://roomsua.me/#/tarrifs")
    //             }
    //             ,5000)
    //     }
    //     if (user.messaging_history) {
    //         if (user.messaging_history.todayCompilation) {
    //             if (user.messaging_history.todayCompilation.length > 0) {
    //                 if (user.messaging_history.lastViewed === "none") {
    //                     sendApartment(user, user.messaging_history.todayCompilation[0])
    //                     user.messaging_history.lastViewed = user.messaging_history.todayCompilation[0];
    //                     api.request({
    //                         "url": "users",
    //                         "method": "PUT",
    //                         "id": user.id,
    //                         body: {messaging_history: user.messaging_history}
    //                     })
    //                 } else {
    //                     sendApartment(user, user.messaging_history.lastViewed)
    //                 }
    //             } else {
    //                 await getFreshApartmentsByUser(user, user.subscription.apartments_amount, 0, []).then(apartments => {
    //                     if (apartments.length > 0) {
    //                         user.messaging_history.todayCompilation = apartments.map(apart => apart.id);
    //                         user.messaging_history.viewed = user.messaging_history.viewed.concat(user.messaging_history.todayCompilation);
    //                         user.messaging_history.lastViewed = user.messaging_history.todayCompilation[0];
    //                         user.days_of_subscription -= 1;
    //                         if (user.subscription.name !== "–í—ñ—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞") {
    //                             api.request({
    //                                 "url": "users",
    //                                 "method": "PUT",
    //                                 "id": user.id,
    //                                 body: {messaging_history: user.messaging_history}
    //                             })
    //                         } else {
    //                             api.request({
    //                                 "url": "users",
    //                                 "method": "PUT",
    //                                 "id": user.id,
    //                                 body: {
    //                                     messaging_history: user.messaging_history,
    //                                     days_of_subscription: user.days_of_subscription
    //                                 }
    //                             })
    //                         }
    //                         try {
    //                             sendApartment(user, user.messaging_history.todayCompilation[0])
    //                         } catch (e) {
    //
    //                         }
    //                         try {
    //                             createTelegraphPage(apartments.slice(0, 10).map(apartment => {
    //                                 return createApartmentsPartTelegraph(apartment)
    //                             }), user).then(compilation => {
    //                                 console.log(compilation);
    //                                 bot.sendMessage(user.telegram_id, `–ú–∏ —Ç—É—Ç –¥–ª—è –¢–µ–±–µ –¥–µ—â–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–ª–∏! [–ö–ª–∞—Ü üòè](${compilation.url})`, {parse_mode: "Markdown"})
    //                             })
    //                         } catch (e) {
    //
    //                         }
    //                     } else {
    //                         console.log("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –ø–æ —Ñ—ñ–ª—å—Ç—Ä–∞–º")
    //                         bot.sendMessage(user.telegram_id, "–ù–∞ –∂–∞–ª—å –∑–∞—Ä–∞–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–æ–≤—ñ –æ–±'—î–∫—Ç–∏ –ø–æ —Ç–≤–æ—ó–º —Ñ—ñ–ª—å—Ç—Ä–∞–º - –∞–ª–µ –Ω–µ —Å—É–º—É–π, —Ç–∏ –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É, —Ç–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑!\n–ü—Ä–∏–¥–±–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–±—ñ—Ä, —ñ —Ü–µ –ø—Ä–∏—à–≤–∏–¥—à–∏—Ç—å –ø–æ—à—É–∫ —É —Ä–∞–∑–∏! –î–µ—Ç–∞–ª—ñ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://roomsua.me/#/personal")
    //                     }
    //                 })
    //
    //             }
    //
    //         }
    //     }
    //
    // })
    sendMainMenu(msg)
})

//TODO Refresh filters
bot.onText(/–û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏/, (msg) => {
    let msgInfo = getMainDataFromMsg(msg);

    getUserByTelegramID(msg).then(user => {
        bot.sendMessage(msgInfo.chat, createFiltersMessage(user), {parse_mode: "Markdown"})
    })

    api.request({
        "url": "cities", "method": "GET"
    }).then(cities => {
        setTimeout(() => {
            bot.sendMessage(msgInfo.chat, "–û–±–µ—Ä–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ!", createKeyboardOpts(cities.map(city => {
                return {text: city.name, callback_data: "set_city_first:" + city.id}
            }), 3))
        }, 2000)

    })
})


function getUserByTelegramID(msg) {
    let chat;
    if (!msg.chat && !msg.from) {
        chat = msg;
    } else {
        chat = msg.hasOwnProperty('chat') ? msg.chat.id : msg.from.id;
    }
    return api.find({chat:chat}).then(users => {
        if (users.length > 0) {
            console.log(users)
            return users[0]
        }
    })/*.then(user => {
        if (user && user.days_of_subscription <= 0) {
            api.request({url: "subscriptions", method: "GET", filters: {"_sort": "price:ASC"}}).then(plans => {
                if (plans) {
                    let keyboard = createKeyboardOpts(plans.filter(plan => {
                        return !plan.name.includes("–¢–µ—Å—Ç")
                    }).map(plan => {
                        return {text: plan.name + " " + plan.price + " –≥—Ä–Ω", url: plan.url}
                    }), 1);
                    bot.sendMessage(user.telegram_id, "–û—É, –≤ —Ç–µ–±–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å —Ç–µ—Å—Ç–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ üò¢\n" +
                        "–¢–æ–±—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–±—Ä–∞—Ç–∏ —Å–≤—ñ–π —Ç–∞—Ä–∏—Ñ —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –π–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ 100 –Ω–æ–≤–∏—Ö –æ–±'—î–∫—Ç—ñ–≤!", keyboard)
                }
            })
            return null;
        } else {
            return user;
        }
    })*/
}

function processReturnedUser(msgInfo) {
    bot.sendMessage(msgInfo.chat, `–ü—Ä–∏–≤—ñ—Ç, ${msgInfo.name} ${msgInfo.last_name}!\n–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!`, {
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            keyboard: [
                [{text: '–°–≤—ñ–∂—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏ üè¢', callback_data: 'getFreshApartments'}, {
                    text: '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ ‚ù§',
                    callback_data: 'liked'
                }],
                [{text: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öô', callback_data: 'settings'}, {
                    text: '–ü—Ä–∏–¥–±–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–±—ñ—Ä üßû‚Äç‚ôÇ',
                    callback_data: 'settings'
                }]
            ]
        })
    })
}

//function processRegisterUser()
async function registerUser(msgInfo) {
    let apiU = new api(msgInfo)
    await apiU.save().then(res => {
        console.log("–£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")
    });
}

function sendGreetingMessage(msgInfo) {
    setTimeout(() => {
        bot.sendMessage(msgInfo.chat, `–¢–æ–±—ñ –Ω–∞–¥–∞–Ω–æ 2 –¥–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ ;)`).then(() => {
            bot.sendMessage(msgInfo.chat, `–¢–∏ –∑ –Ω–∞–º–∏ –≤–ø–µ—Ä—à–µ - —Ç–æ–º—É –∑ —á–∏–º —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏?`)
            //processRegisterUser(msgInfo);
        }).then(() => {
            cities.find().then(cities =>{
                console.log(cities)
                bot.sendMessage(msgInfo.chat,"–û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ!",createKeyboardOpts(cities.map(city =>{
                    return {text: city.name, callback_data: "set_city_first:" + city.id}
                }),3))
            })
            //     api.request({
            //         "url": "cities", "method": "GET"
            //     }).then(cities => {
            //         bot.sendMessage(msgInfo.chat, "–û–±–µ—Ä–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ!", createKeyboardOpts(cities.map(city => {
            //             return {text: city.name, callback_data: "set_city_first:" + city.id}
            //         }), 3))
            //     })
        })
    }, 1000)
}

function createKeyboardOpts(list, elementsPerSubArray, args) {
    let list1 = listToMatrix(list, elementsPerSubArray);
    if (args) {
        list1.push(args);
    }
    const opts = {
        parse_mode: "Markdown",
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            inline_keyboard: list1
        })
    };
    return opts;
}

function listToMatrix(list, elementsPerSubArray) {
    var matrix = [], i, k;
    for (i = 0, k = -1; i < list.length; i++) {
        if (i % elementsPerSubArray === 0) {
            k++;
            matrix[k] = [];
        }
        matrix[k].push(list[i]);
    }

    return matrix;
}

function typeOfApartments(reply,chat,msg){
    if(reply.includes("first")){


    }
}

function sendMainMenu(msg) {
    let chat = msg.hasOwnProperty('chat') ? msg.chat.id : msg.from.id;
    const opts = {
        reply_to_message_id: msg.message_id,
        parse_mode: "Markdown",
        reply_markup: JSON.stringify({
            resize_keyboard: true,
            keyboard: [
                [{text: '–°–≤—ñ–∂—ñ –∫–≤–∞—Ä—Ç–∏—Ä–∏ üè¢', callback_data: 'getFreshApartments'}, {
                    text: '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ ‚ù§Ô∏è',
                    callback_data: 'liked'
                }],
                [{text: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öô', callback_data: 'settings'}, {
                    text: '–ü—Ä–∏–¥–±–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–±—ñ—Ä üßû‚Äç‚ôÇÔ∏è',
                    callback_data: 'settings'
                }]
            ]
        })
    };

    if (chat === MANAGER_CHAT) {
        opts.reply_markup = JSON.stringify({
            resize_keyboard: true,
            keyboard: [
                [{text: '–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üòé'}],
                [{text: '–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞ '}]
            ]
        })
    }
    bot.sendMessage(chat, '–û–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é', opts);
}

function setCityForUser(answer, chat, msg) {
    if (answer.includes("first")) {
        api.request({
            "url": "regions", "method": "GET", "filters": {"city.id": answer.split(":")[1]}
        }).then(regions => {
            var keyboard = createKeyboardOpts(regions.map(region => {
                return {
                    text: region.name,
                    callback_data: "rg_first:" + region.id
                }
            }), 1, [{text: "–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–∞–π–æ–Ω–∏ üíæ", callback_data: "save_regions_first"}]);
            if (regions.length > 0) {
                bot.sendMessage(chat, "–û–±–µ—Ä–∏ —Å–≤—ñ–π —Ä–∞–π–æ–Ω! (–ú–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞)", keyboard)
            } else {
                sendMainMenu(msg)
            }
        })
    }
}

bot.on('callback_query', (msg) => {
    console.log(msg)
    let chat = msg.hasOwnProperty('chat') ? msg.chat.id : msg.from.id;
    let msgInfo = getMainDataFromMsg(msg);
    let reply = msg.data;
    switch (reply){
        default:
            if(reply.includes("set_sity")){
                getUserByTelegramID(msg).then(user => {
                    return api.request({
                        "url": "users",
                        "method": "PUT",
                        "id": user.id,
                        body: {preferences: {city: reply.split(":")[1]}}
                    })
                })
            }


    }


})


bot.on('callback_query', (msg) => {
    let chat = msg.hasOwnProperty('chat') ? msg.chat.id : msg.from.id;
    let msgInfo = getMainDataFromMsg(msg);
    let reply = msg.data;

    switch (reply) {

    }
})